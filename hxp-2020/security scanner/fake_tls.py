import argparse
import hashlib
import hmac
import struct
from Crypto.Cipher import AES
from Crypto.PublicKey import RSA
from pathlib import Path


# in bytes (i.e., this is 4096 bits)
KEY_LENGTH = 512


# RFC 5246, section 5
def prf(secret, label, seed, length):
    def hmac_sha256(key, msg):
        return hmac.digest(key, msg, hashlib.sha256)

    seed = label + seed

    result = b''
    cur_a = seed
    while len(result) < length:
        cur_a = hmac_sha256(secret, cur_a)
        result += hmac_sha256(secret, cur_a + seed)
    return result[:length]


def decrypt_premaster_secret(secret, key):
    secret = int.from_bytes(secret, byteorder='big')
    decrypted_secret = pow(secret, key.d, key.n).to_bytes(KEY_LENGTH, byteorder='big')
    pkcs_prefix = b'\x00\x02'
    assert decrypted_secret.startswith(pkcs_prefix)
    decrypted_secret = decrypted_secret.removeprefix(pkcs_prefix)
    decrypted_secret = decrypted_secret[decrypted_secret.find(b'\x00') + 1:]
    assert len(decrypted_secret) == 48
    return decrypted_secret


def create_verification(secret, handshake_log, seed, length):
    session_hash = hashlib.sha256(handshake_log).digest()
    return prf(secret, seed, session_hash, length)


def derive_keys(encrypted_premaster_secret, handshake_log, client_random, server_random, key):
    premaster_secret = decrypt_premaster_secret(encrypted_premaster_secret, key)
    master_secret = create_verification(premaster_secret, handshake_log, b'extended master secret', 48)

    enc_key_length, fixed_iv_length = 16, 4
    expanded_key_length = 2 * (enc_key_length + fixed_iv_length)
    key_block = prf(master_secret, b'key expansion', server_random + client_random, expanded_key_length)
    return (
        master_secret,
        # client_write_key
        key_block[:enc_key_length],
        # server_write_key
        key_block[enc_key_length:2 * enc_key_length],
        # client_salt
        key_block[2 * enc_key_length:2 * enc_key_length + fixed_iv_length],
        # server salt
        key_block[2 * enc_key_length + fixed_iv_length:],
    )


def to_ad(seq_num, tls_type, tls_version, tls_len):
    return struct.pack('>QBHH', seq_num, tls_type, tls_version, tls_len)


def encrypt(data, key, salt, explicit_nonce, seq_num, tls_type, tls_version):
    cipher = AES.new(key, AES.MODE_GCM, nonce=salt + explicit_nonce)
    cipher.update(to_ad(seq_num, tls_type, tls_version, len(data)))
    ciphertext, tag = cipher.encrypt_and_digest(data)
    return explicit_nonce + ciphertext + tag


def decrypt(data, key, salt, seq_num, tls_type, tls_version):
    cipher = AES.new(key, AES.MODE_GCM, nonce=salt + data[:8])
    ciphertext = data[8:-16]
    tag = data[-16:]
    cipher.update(to_ad(seq_num, tls_type, tls_version, len(ciphertext)))
    return cipher.decrypt_and_verify(ciphertext, tag)


if __name__ == '__main__':
    p = argparse.ArgumentParser()
    p.add_argument('KEY')
    args = p.parse_args()

    key = RSA.import_key(Path(args.KEY).read_text())
    client_random = bytes.fromhex('49d3c79efc22678d5035c4c94c95f7d79910192b0b73b067605e99c8d49438c6')
    server_random = bytes.fromhex('9d9ba7dfbf3f13e2be88eec465d741ebaf2370264795b8f9fe778dd8e011d111')
    eps = bytes.fromhex('c5f3103c3b3227e712c40350d946521b64c06e03e5c6c47dc9c96ec876ec2deb6861f7dd47ef86d52a479fabc56f227bfbfd21299ab007e642f4699a3ab5dd6d916e26843cc948b5cc603431ba7946a81b923e8ae446bc7c83e5cff8578ed7924e49d0be3268f7da93e8555992208053cf140f7f34c7f5e59b08e73de554e2133eb5d54af8847fb8de242591ad5639016db58d27c96de5d5f5ca5742939a8d3bd888f00e6eaa6e123cc6892c435d9d3e6d4545471421e88046d177ad417bcc1990c10aa425566b07d7fd40b2adc0b3ff43dd05b766928b06944281d418a2d047019085eea4f9bccb907868e3a7395efbbfed5eae9bba0c79efd5c5521be951954aeef279ac08ff557eb470392c8c620a1db9a5d705f287934b15412d882b8813a769b5572dca9276b694a364306c9f209f68fd13aaebd8fc9ca5add089f2ddff19ed64951af797006575cb3d751e65ccfb5b9fdbb90941e68680a77e9be8f46ca7882edbe9e98654fcca8bea84681b71cb812f8e93b9202362d5273d4901a436c50f26f470ee4aeec7e15725beeb4013d7153301223ecff87a11b40858fcde1dc997dbe7a4ca804ce05ab12d96b4de56b96a58f8cb333c95ae049b124c66450ff6e79f4f2a62d067da39a2a057213af8703222c1708cd337cc14a69903162282434d988796debdbaf549ae29d1275209e4f71faa03789c24dcb638f757961931')

    client_hello = bytes.fromhex('010000e3030349d3c79efc22678d5035c4c94c95f7d79910192b0b73b067605e99c8d49438c6000032c02ccca9c0adc00ac02bc0acc009c030cca8c014c02fc013009dc09d0035009cc09c002f009fccaac09f0039009ec09e003301000088000500050100000000000a00140012001700180019001d01000101010201030104000b00020100000d0020001e040108090804040308070501080a080505030601080b08060603020102030010000e000c02683208687474702f312e310016000000170000ff0100010000000014001200000f66616b656769742e6c69627a2e736f001c00024000')
    server_hello = bytes.fromhex('0200006003039d9ba7dfbf3f13e2be88eec465d741ebaf2370264795b8f9fe778dd8e011d11120d7a2a9b62f281b50940ffa688f2495c3efe036e9dc2f2772352a34dcf7529cdc009c000018ff010001000010000b000908687474702f312e3100170000')
    certificate = bytes.fromhex('0b000a89000a8600061730820613308204fba003020102021204e004a089bb72325f6f678b6db454572acb300d06092a864886f70d01010b05003032310b300906035504061302555331163014060355040a130d4c6574277320456e6372797074310b3009060355040313025233301e170d3230313232393031323934335a170d3231303332393031323934335a30123110300e060355040313076c69627a2e736f30820222300d06092a864886f70d01010105000382020f003082020a0282020100d160064c9e022b2be3f31e1342eb3bbd567a51266c76bdbc2e90c18cb7d8c6efb3160bdf04194aeaf8f31c86c9f822b8ac27b391a8ea3fde0cb7eea0bcd78d1b33ed168fa3094fb578b6cd85c3c8023ded9b1073d1d020e28296d37153eea582965c3b9b5eb4d499fa9f25778616d76a310bb0a58697cab1433afe8c148f0231786d020922ed13997980658959cd36f6b51ef2d8a551443df160503d6b5175aa5be7c4740f8b917e4302725b78ecd9083ae1b7f70517aefb0d47dfdfd4084c417ae2e9a9fcf5421253219e62110f9ae93c07091c6b809842b1da1046c001ef586f770a5afb121e30ba274608fe62cc4c0f704a0fe3b22eb50a636fe24bb868cebab2f667ad0ae763d285151da3958da48ad385e787ea4509d93448beca94312d06ae13c45395783c996e3491fe4fd2d3b17330bb985a58a7b3399d477966e56cd95441b6b2101ec614886fc368bfc47fade6a3ee2f9cb82cb6abc60ed31bf2d6b81d4b6ffaa431b35c7a30e525c6d735eb8830a0f08978b9431908f30187f4ecc150c510d3519028a4211afe2c1a54c5587862d1e4f02531d26a8bf725dea20d88fa3ddf91dbfd88276c3612dff87ba3c9d94c0aec58f2e5aa173bdb42f1ad7dcf890ef352b8a14c260967e528fb43af5846ace877eb648ed2f8a93230aacc184e71ab27d650fbba7067a6d48eed487151844c1a1649b175092c26f12ba965430203010001a38202413082023d300e0603551d0f0101ff0404030205a0301d0603551d250416301406082b0601050507030106082b06010505070302300c0603551d130101ff04023000301d0603551d0e04160414ed3ddfe538fda9dd9d09fc18e0e2840450f6f715301f0603551d23041830168014142eb317b75856cbae500940e61faf9d8b14c2c6305506082b0601050507010104493047302106082b060105050730018615687474703a2f2f72332e6f2e6c656e63722e6f7267302206082b060105050730028616687474703a2f2f72332e692e6c656e63722e6f72672f30120603551d11040b300982076c69627a2e736f304c0603551d20044530433008060667810c0102013037060b2b0601040182df130101013028302606082b06010505070201161a687474703a2f2f6370732e6c657473656e63727970742e6f726730820103060a2b06010401d6790204020481f40481f100ef0076004494652eb0eeceafc44007d8a8fe28c0dae682bed8cb31b53fd33396b5b681a800000176ac54703a0000040300473045022063f42510766e3bac056d3ea5acec778fbfb4e200f9e43719ef6ee491b4b7b616022100d7bd367c21b7e9536e240454e33025a6cf79f12983ac009b583bc92154c4a22f007500f65c942fd1773022145418083094568ee34d131933bfdf0c2f200bcc4ef164e300000176ac547024000004030046304402201c083e6f364c5000694e87458ca53cdddfd28247f277afd509f0ae67367470c802202474370f123abc64e492f910bbc3543345014877ee1c0f00027020610f39105c300d06092a864886f70d01010b0500038201010026e76571a45308cdb6b1b6d9156f3bbf7a6c9be6bf74f874b6bec615ba2ccb3e8cd64fadcda80f5e2c3ca2c6dcce1ad9be1137d82eabb665a620b8a937e888d06466e1597d903705da3a78b4bcb97e43bd781357e8bbd9270669b52620b080b9577a8884a0acf27234856a7d3b14ebc9fb4b6832b1d2ad1b462a2dd213dfc168b3e47d9307ef12adfa86e36917951c6e2a227bc50a5a587990ba27a261d2ca570df185e65a50d5e79485d740e84162bd0627c1b8f4d7eb1b6ea94deed4a30c2e4b73543abc0583ee0d07f45ae9058eee3f6a7d8f2bd28ea074434ab485f1480740e391201aedee80d8f6ddc80c170368cef460c92e7c13a8af1c86b1b30461d4000469308204653082034da0030201020210400175048314a4c8218c84a90c16cddf300d06092a864886f70d01010b0500303f31243022060355040a131b4469676974616c205369676e617475726520547275737420436f2e311730150603550403130e44535420526f6f74204341205833301e170d3230313030373139323134305a170d3231303932393139323134305a3032310b300906035504061302555331163014060355040a130d4c6574277320456e6372797074310b300906035504031302523330820122300d06092a864886f70d01010105000382010f003082010a0282010100bb021528ccf6a094d30f12ec8d5592c3f882f199a67a4288a75d26aab52bb9c54cb1af8e6bf975c8a3d70f4794145535578c9ea8a23919f5823c42a94e6ef53bc32edb8dc0b05cf35938e7edcf69f05a0b1bbec094242587fa3771b313e71cace19befdbe43b45524596a9c153ce34c852eeb5aeed8fde6070e2a554abb66d0e97a540346b2bd3bc66eb66347cfa6b8b8f572999f830175dba726ffb81c5add286583d17c7e709bbf12bf786dcc1da715dd446e3ccad25c188bc60677566b3f118f7a25ce653ff3a88b647a5ff1318ea9809773f9d53f9cf01e5f5a6701714af63a4ff99b3939ddc53a706fe48851da169ae2575bb13cc5203f5ed51a18bdb150203010001a38201683082016430120603551d130101ff040830060101ff020100300e0603551d0f0101ff040403020186304b06082b06010505070101043f303d303b06082b06010505073002862f687474703a2f2f617070732e6964656e74727573742e636f6d2f726f6f74732f647374726f6f74636178332e703763301f0603551d23041830168014c4a7b1a47b2c71fadbe14b9075ffc4156085891030540603551d20044d304b3008060667810c010201303f060b2b0601040182df130101013030302e06082b060105050702011622687474703a2f2f6370732e726f6f742d78312e6c657473656e63727970742e6f7267303c0603551d1f043530333031a02fa02d862b687474703a2f2f63726c2e6964656e74727573742e636f6d2f445354524f4f544341583343524c2e63726c301d0603551d0e04160414142eb317b75856cbae500940e61faf9d8b14c2c6301d0603551d250416301406082b0601050507030106082b06010505070302300d06092a864886f70d01010b05000382010100d94ce0c9f584883731dbbb13e2b3fc8b6b62126c58b7497e3c02b7a81f2861ebcee02e73ef49077a35841f1dad68f0d8fe56812f6d7f58a66e3536101c73c3e5bd6d5e01d76e72fb2aa0b8d35764e55bc269d4d0b2f77c4bc3178e887273dcfdfc6dbde3c90b8e613a16587d74362b55803dc763be8443c639a10e6b579e3f29c180f6b2bd47cbaa306cb732e159540b1809175e636cfb96673c1c730c938bc611762486de400707e47d2d66b525a39658c8ea80eecf693b96fce68dc033f389f8292d14142d7ef06170955df70be5c0fb24faec8ecb61c8ee637128a82c053b77ef9b5e0364f051d1e485535cb00297d47ec634d2ce1000e4b1df3ac2ea17be')
    server_hello_done = bytes.fromhex('0e000000')
    client_key_exchange = bytes.fromhex('100002020200c5f3103c3b3227e712c40350d946521b64c06e03e5c6c47dc9c96ec876ec2deb6861f7dd47ef86d52a479fabc56f227bfbfd21299ab007e642f4699a3ab5dd6d916e26843cc948b5cc603431ba7946a81b923e8ae446bc7c83e5cff8578ed7924e49d0be3268f7da93e8555992208053cf140f7f34c7f5e59b08e73de554e2133eb5d54af8847fb8de242591ad5639016db58d27c96de5d5f5ca5742939a8d3bd888f00e6eaa6e123cc6892c435d9d3e6d4545471421e88046d177ad417bcc1990c10aa425566b07d7fd40b2adc0b3ff43dd05b766928b06944281d418a2d047019085eea4f9bccb907868e3a7395efbbfed5eae9bba0c79efd5c5521be951954aeef279ac08ff557eb470392c8c620a1db9a5d705f287934b15412d882b8813a769b5572dca9276b694a364306c9f209f68fd13aaebd8fc9ca5add089f2ddff19ed64951af797006575cb3d751e65ccfb5b9fdbb90941e68680a77e9be8f46ca7882edbe9e98654fcca8bea84681b71cb812f8e93b9202362d5273d4901a436c50f26f470ee4aeec7e15725beeb4013d7153301223ecff87a11b40858fcde1dc997dbe7a4ca804ce05ab12d96b4de56b96a58f8cb333c95ae049b124c66450ff6e79f4f2a62d067da39a2a057213af8703222c1708cd337cc14a69903162282434d988796debdbaf549ae29d1275209e4f71faa03789c24dcb638f757961931')

    handshake_log = b''.join([
        client_hello,
        server_hello,
        certificate,
        server_hello_done,
        client_key_exchange,
    ])

    master_secret, client_key, server_key, client_salt, server_salt = derive_keys(eps, handshake_log, client_random, server_random, key)

    client_finished = bytes.fromhex('1400000cc3fde81b81326aafdc429386')
    handshake_log += b''.join([
        client_finished,
    ])

    request = bytes.fromhex('0000000000000001928e20af3d581387e94b787a97bcb4296d0f9289d9c1e063bf184253b3b9fb906feb47e53f55d94e4a333395641b7697a23bf3b7c006f61d5fc036f2e484c27adabb68ec114c144186246ec82ad103c2df0406a7493bdfdcdc92052035c1a910d87072170d9f328ea30b4499ff21917435ee62cce479b850109abca740a343cf0cd0b80b724d3d58e34d38ca37e22042009c2e3111533f6ea0e25c409c46edb301288cd2acdd0998e4bb540621a28cda2b')
    decrypted_request = decrypt(request, client_key, client_salt, 1, 0x17, 0x0303)
    encrypted_request = encrypt(decrypted_request, client_key, client_salt, bytes.fromhex('0000000000000001'), 1, 0x17, 0x0303)
    assert request == encrypted_request
    print('request', decrypted_request)

    server_finished = bytes.fromhex('772d8e867552d183dac22ecc7adf84708fa47d531dc0d2e91d6f3b2c0803ffeb1cd684eef220e9c6')
    print('server finished from pcap', decrypt(server_finished, server_key, server_salt, 0, 0x16, 0x0303).hex())
    print('server finished calculated', create_verification(master_secret, handshake_log, b'server finished', 12).hex())